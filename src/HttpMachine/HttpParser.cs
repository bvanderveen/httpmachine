
#line 1 "HttpParser.cs.rl"
using System;
using System.Text;

namespace HttpMachine
{
    public partial class HttpParser
    {
        IHttpParserHandler parser;

		// necessary evil?
		StringBuilder sb;
		StringBuilder sb2;
		// Uri uri;

		int versionMajor;
		int versionMinor;
		
        int contentLength;

		// TODO make flags or something, dang
		bool inContentLengthHeader;
		bool inConnectionHeader;
		bool inTransferEncodingHeader;
		bool inUpgradeHeader;
		bool gotConnectionClose;
		bool gotConnectionKeepAlive;
		bool gotTransferEncodingChunked;
		bool gotUpgradeValue;

        int cs;
        // int mark;

        
#line 312 "HttpParser.cs.rl"

        
        
#line 41 "HttpParser.cs"
static readonly sbyte[] _http_parser_actions =  new sbyte [] {
	0, 1, 0, 1, 10, 1, 11, 1, 
	13, 1, 16, 1, 17, 1, 25, 1, 
	26, 1, 27, 1, 28, 1, 29, 1, 
	30, 2, 1, 0, 2, 2, 0, 2, 
	4, 11, 2, 12, 8, 2, 14, 0, 
	2, 14, 13, 2, 15, 13, 2, 18, 
	25, 2, 19, 25, 2, 20, 26, 2, 
	21, 26, 2, 22, 25, 2, 23, 26, 
	2, 24, 25, 3, 3, 2, 0, 3, 
	3, 14, 0, 3, 3, 14, 13, 3, 
	3, 15, 13, 3, 4, 1, 0, 4, 
	9, 1, 6, 0, 4, 9, 1, 7, 
	0, 4, 9, 1, 7, 13, 5, 9, 
	1, 5, 7, 0
};

static readonly short[] _http_parser_key_offsets =  new short [] {
	0, 0, 5, 6, 10, 15, 34, 35, 
	57, 58, 74, 82, 84, 90, 94, 98, 
	102, 106, 110, 112, 116, 120, 124, 126, 
	130, 134, 138, 141, 145, 149, 153, 157, 
	161, 163, 181, 199, 219, 237, 255, 273, 
	291, 309, 327, 343, 361, 379, 397, 413, 
	431, 449, 467, 485, 503, 521, 537, 555, 
	573, 591, 609, 627, 645, 663, 679, 697, 
	715, 733, 751, 769, 787, 805, 823, 839, 
	857, 875, 893, 911, 929, 947, 963, 964, 
	965, 966, 967, 968, 970, 971, 973, 974, 
	990, 996, 1002, 1020, 1035, 1041, 1047, 1055, 
	1062, 1070, 1074, 1085, 1092, 1095, 1099, 1105, 
	1108, 1110, 1113, 1115, 1120, 1125, 1128, 1129, 
	1132, 1133, 1141, 1149, 1169, 1188, 1204, 1224, 
	1243, 1258, 1275, 1292, 1307, 1322, 1328, 1334, 
	1340, 1346, 1362, 1378, 1384, 1390, 1411, 1432, 
	1442, 1456, 1471, 1477, 1483, 1499, 1519, 1537, 
	1543, 1549, 1568, 1576, 1583, 1591, 1595, 1608, 
	1615, 1620, 1626, 1632, 1635, 1637, 1640, 1642, 
	1649, 1656, 1659, 1660, 1663, 1664, 1672, 1680, 
	1701, 1721, 1738, 1759, 1779, 1794, 1811, 1833, 
	1854, 1872, 1894, 1915, 1933, 1953, 1971, 1989, 
	1995, 2001, 2020, 2041, 2061, 2078, 2099, 2119, 
	2134, 2151, 2172, 2182, 2192, 2202, 2214, 2224, 
	2236, 2254, 2275, 2296, 2317, 2338, 2359, 2379, 
	2384, 2389, 2394, 2399, 2404, 2409, 2414, 2419, 
	2424, 2429, 2434, 2439, 2444, 2449, 2454, 2459, 
	2464, 2469, 2474, 2479, 2484, 2489, 2490, 2490, 
	2490, 2490, 2490, 2490
};

static readonly char[] _http_parser_trans_keys =  new char [] {
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0021', '\u0043', '\u0054', '\u0055', 
	'\u0063', '\u0074', '\u0075', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u000a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0009', '\u000a', '\u000d', '\u0020', '\u0043', '\u004b', 
	'\u0063', '\u006b', '\u000a', '\u000d', '\u000a', '\u000d', '\u0048', '\u004c', 
	'\u0068', '\u006c', '\u000a', '\u000d', '\u0055', '\u0075', '\u000a', '\u000d', 
	'\u004e', '\u006e', '\u000a', '\u000d', '\u004b', '\u006b', '\u000a', '\u000d', 
	'\u0045', '\u0065', '\u000a', '\u000d', '\u0044', '\u0064', '\u000a', '\u000d', 
	'\u000a', '\u000d', '\u004f', '\u006f', '\u000a', '\u000d', '\u0053', '\u0073', 
	'\u000a', '\u000d', '\u0045', '\u0065', '\u000a', '\u000d', '\u000a', '\u000d', 
	'\u0045', '\u0065', '\u000a', '\u000d', '\u0045', '\u0065', '\u000a', '\u000d', 
	'\u0050', '\u0070', '\u000a', '\u000d', '\u002d', '\u000a', '\u000d', '\u0041', 
	'\u0061', '\u000a', '\u000d', '\u004c', '\u006c', '\u000a', '\u000d', '\u0049', 
	'\u0069', '\u000a', '\u000d', '\u0056', '\u0076', '\u000a', '\u000d', '\u0045', 
	'\u0065', '\u000a', '\u000d', '\u0021', '\u003a', '\u004f', '\u006f', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', 
	'\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u004e', '\u0054', '\u006e', '\u0074', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0043', 
	'\u0063', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0054', '\u0074', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0049', '\u0069', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004f', '\u006f', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', 
	'\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0054', '\u0074', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u002d', '\u002e', 
	'\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004c', 
	'\u006c', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0047', '\u0067', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0054', 
	'\u0074', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0048', '\u0068', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0052', '\u0072', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0041', '\u0061', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0042', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', 
	'\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0053', '\u0073', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0046', '\u0066', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0052', 
	'\u0072', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u002d', '\u002e', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0043', '\u0063', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004f', 
	'\u006f', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0044', '\u0064', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0049', '\u0069', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0047', 
	'\u0067', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0050', '\u0070', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0047', '\u0067', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0052', '\u0072', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0041', 
	'\u0061', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0042', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0044', '\u0064', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0048', '\u0054', '\u0054', '\u0050', '\u002f', 
	'\u0030', '\u0039', '\u002e', '\u0030', '\u0039', '\u000d', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', 
	'\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', 
	'\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0040', 
	'\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', 
	'\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u002d', '\u002e', '\u003a', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u003a', '\u000d', 
	'\u0020', '\u0030', '\u0039', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002e', '\u0030', '\u0039', '\u0030', '\u0039', '\u002e', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u000d', '\u0020', '\u003a', '\u0030', '\u0039', 
	'\u000d', '\u0020', '\u003a', '\u0030', '\u0039', '\u002e', '\u0030', '\u0039', 
	'\u002e', '\u002e', '\u0030', '\u0039', '\u002e', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002d', '\u002e', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002d', '\u002e', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003a', 
	'\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u0040', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0040', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0023', '\u0025', 
	'\u003d', '\u003f', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', 
	'\u0040', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', 
	'\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', 
	'\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', 
	'\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0023', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0023', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', 
	'\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003d', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', 
	'\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0021', '\u0025', '\u002f', '\u003d', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', 
	'\u002f', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', 
	'\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', 
	'\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', 
	'\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002d', '\u002e', '\u002f', 
	'\u003a', '\u003f', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u002f', '\u003a', '\u003f', '\u000d', '\u0020', '\u002f', '\u003f', 
	'\u0030', '\u0039', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002e', '\u0030', '\u0039', '\u0030', '\u0039', '\u002e', '\u0030', '\u0039', 
	'\u0030', '\u0039', '\u000d', '\u0020', '\u002f', '\u003a', '\u003f', '\u0030', 
	'\u0039', '\u000d', '\u0020', '\u002f', '\u003a', '\u003f', '\u0030', '\u0039', 
	'\u002e', '\u0030', '\u0039', '\u002e', '\u002e', '\u0030', '\u0039', '\u002e', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', 
	'\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002d', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', 
	'\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', 
	'\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', 
	'\u0039', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u005f', '\u007e', '\u0024', 
	'\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003a', 
	'\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', 
	'\u002e', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002f', '\u003d', 
	'\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', 
	'\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u002f', '\u003a', 
	'\u003b', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002d', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', 
	'\u003a', '\u003b', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002e', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', 
	'\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', 
	'\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', 
	'\u0066', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', 
	'\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002d', '\u002e', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', 
	'\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', 
	'\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003f', '\u0040', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u003a', '\u003b', '\u003d', '\u005f', '\u007e', 
	'\u0024', '\u002f', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', '\u003b', 
	'\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u002b', '\u002d', '\u002e', '\u003a', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002b', '\u002d', 
	'\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u002b', '\u002d', '\u002e', '\u003a', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002b', '\u002d', 
	'\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002f', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', 
	'\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', 
	'\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', 
	'\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002b', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u003a', 
	'\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', (char) 0
};

static readonly sbyte[] _http_parser_single_lengths =  new sbyte [] {
	0, 1, 1, 0, 1, 9, 1, 10, 
	1, 4, 8, 2, 6, 4, 4, 4, 
	4, 4, 2, 4, 4, 4, 2, 4, 
	4, 4, 3, 4, 4, 4, 4, 4, 
	2, 6, 6, 8, 6, 6, 6, 6, 
	6, 6, 4, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 4, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 4, 6, 
	6, 6, 6, 6, 6, 4, 1, 1, 
	1, 1, 1, 0, 1, 0, 1, 8, 
	0, 0, 8, 7, 0, 0, 2, 1, 
	2, 0, 5, 1, 3, 2, 0, 1, 
	0, 1, 0, 3, 3, 1, 1, 1, 
	1, 2, 2, 10, 9, 8, 12, 9, 
	9, 7, 9, 7, 7, 0, 0, 0, 
	0, 8, 8, 0, 0, 11, 11, 2, 
	6, 7, 0, 0, 8, 10, 10, 0, 
	0, 7, 2, 1, 2, 0, 7, 1, 
	5, 4, 0, 1, 0, 1, 0, 5, 
	5, 1, 1, 1, 1, 2, 2, 9, 
	8, 7, 11, 8, 9, 7, 12, 11, 
	10, 14, 11, 12, 10, 10, 10, 0, 
	0, 7, 9, 8, 7, 11, 8, 9, 
	7, 13, 4, 4, 2, 6, 4, 4, 
	8, 13, 11, 13, 13, 11, 10, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0
};

static readonly sbyte[] _http_parser_range_lengths =  new sbyte [] {
	0, 2, 0, 2, 2, 5, 0, 6, 
	0, 6, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 4, 
	3, 3, 5, 4, 3, 3, 3, 3, 
	3, 2, 3, 3, 0, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	0, 3, 3, 5, 5, 4, 4, 5, 
	3, 5, 4, 4, 4, 3, 3, 3, 
	3, 4, 4, 3, 3, 5, 5, 4, 
	4, 4, 3, 3, 4, 5, 4, 3, 
	3, 6, 3, 3, 3, 2, 3, 3, 
	0, 1, 3, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 0, 3, 3, 6, 
	6, 5, 5, 6, 3, 5, 5, 5, 
	4, 4, 5, 3, 5, 4, 4, 3, 
	3, 6, 6, 6, 5, 5, 6, 3, 
	5, 4, 3, 3, 4, 3, 3, 4, 
	5, 4, 5, 4, 4, 5, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 0, 0, 0, 
	0, 0, 0, 0
};

static readonly short[] _http_parser_index_offsets =  new short [] {
	0, 0, 4, 6, 9, 13, 28, 30, 
	47, 49, 60, 69, 72, 79, 84, 89, 
	94, 99, 104, 107, 112, 117, 122, 125, 
	130, 135, 140, 144, 149, 154, 159, 164, 
	169, 172, 185, 198, 213, 226, 239, 252, 
	265, 278, 291, 302, 315, 328, 341, 353, 
	366, 379, 392, 405, 418, 431, 442, 455, 
	468, 481, 494, 507, 520, 533, 545, 558, 
	571, 584, 597, 610, 623, 636, 649, 660, 
	673, 686, 699, 712, 725, 738, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	780, 784, 788, 802, 814, 818, 822, 828, 
	833, 839, 842, 851, 856, 860, 864, 868, 
	871, 873, 876, 878, 883, 888, 891, 893, 
	896, 898, 904, 910, 926, 941, 954, 971, 
	986, 999, 1012, 1026, 1038, 1050, 1054, 1058, 
	1062, 1066, 1079, 1092, 1096, 1100, 1117, 1134, 
	1141, 1152, 1164, 1168, 1172, 1185, 1201, 1216, 
	1220, 1224, 1238, 1244, 1249, 1255, 1258, 1269, 
	1274, 1280, 1286, 1290, 1293, 1295, 1298, 1300, 
	1307, 1314, 1317, 1319, 1322, 1324, 1330, 1336, 
	1352, 1367, 1380, 1397, 1412, 1425, 1438, 1456, 
	1473, 1488, 1507, 1524, 1540, 1556, 1571, 1586, 
	1590, 1594, 1608, 1624, 1639, 1652, 1669, 1684, 
	1697, 1710, 1728, 1736, 1744, 1751, 1761, 1769, 
	1778, 1792, 1810, 1827, 1845, 1863, 1880, 1896, 
	1900, 1904, 1908, 1912, 1916, 1920, 1924, 1928, 
	1932, 1936, 1940, 1944, 1948, 1952, 1956, 1960, 
	1964, 1968, 1972, 1976, 1980, 1984, 1986, 1987, 
	1988, 1989, 1990, 1991
};

static readonly byte[] _http_parser_trans_targs =  new byte [] {
	2, 4, 4, 0, 3, 0, 4, 4, 
	0, 5, 207, 207, 0, 6, 78, 87, 
	88, 122, 87, 90, 87, 87, 87, 94, 
	87, 133, 133, 0, 7, 0, 8, 9, 
	33, 54, 71, 33, 54, 71, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 232, 
	0, 9, 10, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 10, 0, 0, 10, 
	12, 23, 12, 23, 11, 0, 6, 11, 
	0, 6, 13, 19, 13, 19, 11, 0, 
	6, 14, 14, 11, 0, 6, 15, 15, 
	11, 0, 6, 16, 16, 11, 0, 6, 
	17, 17, 11, 0, 6, 18, 18, 11, 
	0, 6, 11, 0, 6, 20, 20, 11, 
	0, 6, 21, 21, 11, 0, 6, 22, 
	22, 11, 0, 6, 11, 0, 6, 24, 
	24, 11, 0, 6, 25, 25, 11, 0, 
	6, 26, 26, 11, 0, 6, 27, 11, 
	0, 6, 28, 28, 11, 0, 6, 29, 
	29, 11, 0, 6, 30, 30, 11, 0, 
	6, 31, 31, 11, 0, 6, 32, 32, 
	11, 0, 6, 11, 9, 10, 34, 34, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 35, 35, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	36, 43, 36, 43, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 37, 
	37, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 38, 38, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 39, 39, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 40, 40, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 41, 41, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	42, 42, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	44, 44, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 45, 45, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 46, 46, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 47, 9, 
	10, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 48, 48, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	49, 49, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 50, 50, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 51, 51, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 52, 
	52, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 53, 53, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 55, 55, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 56, 56, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 57, 57, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 58, 58, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	59, 59, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 60, 60, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 61, 61, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 62, 9, 
	10, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 63, 63, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	64, 64, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 65, 65, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 66, 66, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 67, 
	67, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 68, 68, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 69, 69, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 70, 70, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 72, 72, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 73, 73, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	74, 74, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 75, 75, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 76, 76, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 77, 
	77, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 79, 0, 80, 
	0, 81, 0, 82, 0, 83, 0, 84, 
	0, 85, 0, 86, 0, 6, 0, 6, 
	78, 87, 88, 87, 90, 87, 87, 87, 
	87, 87, 87, 0, 89, 89, 89, 0, 
	87, 87, 87, 0, 6, 78, 91, 92, 
	91, 91, 91, 91, 91, 94, 91, 115, 
	115, 0, 6, 78, 91, 92, 91, 91, 
	91, 91, 91, 91, 91, 0, 93, 93, 
	93, 0, 91, 91, 91, 0, 95, 102, 
	113, 96, 96, 0, 95, 96, 96, 96, 
	0, 95, 97, 96, 96, 96, 0, 98, 
	98, 0, 6, 78, 99, 100, 101, 98, 
	98, 98, 0, 99, 98, 98, 98, 0, 
	6, 78, 101, 0, 6, 78, 101, 0, 
	103, 98, 98, 0, 104, 111, 0, 105, 
	0, 106, 109, 0, 107, 0, 6, 78, 
	101, 108, 0, 6, 78, 101, 100, 0, 
	106, 110, 0, 106, 0, 104, 112, 0, 
	104, 0, 95, 102, 114, 96, 96, 0, 
	95, 102, 96, 96, 96, 0, 6, 78, 
	91, 92, 116, 117, 91, 91, 91, 91, 
	91, 96, 91, 115, 115, 0, 6, 78, 
	91, 92, 116, 91, 91, 91, 91, 91, 
	96, 91, 115, 115, 0, 6, 78, 91, 
	92, 91, 91, 91, 91, 91, 91, 118, 
	118, 0, 6, 78, 91, 92, 119, 120, 
	121, 91, 91, 91, 91, 91, 91, 98, 
	118, 118, 0, 6, 78, 91, 92, 119, 
	91, 91, 91, 91, 91, 98, 91, 118, 
	118, 0, 6, 78, 91, 92, 121, 91, 
	91, 91, 91, 91, 91, 91, 0, 6, 
	78, 91, 92, 91, 91, 91, 91, 101, 
	91, 91, 91, 0, 6, 78, 122, 123, 
	127, 122, 129, 122, 122, 122, 122, 122, 
	122, 0, 6, 78, 124, 125, 124, 124, 
	124, 124, 124, 124, 124, 0, 6, 78, 
	124, 125, 124, 124, 124, 124, 124, 124, 
	124, 0, 126, 126, 126, 0, 124, 124, 
	124, 0, 128, 128, 128, 0, 122, 122, 
	122, 0, 6, 78, 130, 123, 131, 130, 
	130, 130, 130, 130, 130, 130, 0, 6, 
	78, 130, 123, 131, 130, 130, 130, 130, 
	130, 130, 130, 0, 132, 132, 132, 0, 
	130, 130, 130, 0, 6, 78, 87, 88, 
	134, 193, 202, 87, 90, 87, 87, 87, 
	194, 87, 201, 201, 0, 6, 78, 87, 
	88, 134, 181, 87, 87, 90, 87, 87, 
	87, 134, 135, 134, 134, 0, 135, 136, 
	135, 135, 135, 135, 0, 137, 138, 140, 
	137, 137, 137, 137, 137, 137, 137, 0, 
	6, 78, 137, 138, 137, 137, 137, 137, 
	137, 137, 137, 0, 139, 139, 139, 0, 
	137, 137, 137, 0, 6, 78, 137, 138, 
	141, 137, 137, 137, 137, 137, 137, 137, 
	0, 6, 78, 142, 143, 137, 142, 137, 
	145, 142, 142, 142, 146, 142, 174, 174, 
	0, 6, 78, 142, 143, 137, 142, 137, 
	145, 142, 142, 142, 142, 142, 142, 0, 
	144, 144, 144, 0, 142, 142, 142, 0, 
	6, 78, 137, 138, 137, 137, 137, 137, 
	146, 137, 137, 167, 167, 0, 147, 154, 
	165, 148, 148, 0, 147, 148, 148, 148, 
	0, 147, 149, 148, 148, 148, 0, 150, 
	150, 0, 6, 78, 151, 152, 137, 153, 
	137, 150, 150, 150, 0, 151, 150, 150, 
	150, 0, 6, 78, 137, 153, 137, 0, 
	6, 78, 137, 137, 153, 0, 155, 150, 
	150, 0, 156, 163, 0, 157, 0, 158, 
	161, 0, 159, 0, 6, 78, 137, 153, 
	137, 160, 0, 6, 78, 137, 153, 137, 
	152, 0, 158, 162, 0, 158, 0, 156, 
	164, 0, 156, 0, 147, 154, 166, 148, 
	148, 0, 147, 154, 148, 148, 148, 0, 
	6, 78, 137, 138, 168, 169, 137, 137, 
	137, 137, 148, 137, 137, 167, 167, 0, 
	6, 78, 137, 138, 168, 137, 137, 137, 
	137, 148, 137, 137, 167, 167, 0, 6, 
	78, 137, 138, 137, 137, 137, 137, 137, 
	137, 170, 170, 0, 6, 78, 137, 138, 
	171, 172, 173, 137, 137, 137, 137, 137, 
	150, 137, 170, 170, 0, 6, 78, 137, 
	138, 171, 137, 137, 137, 137, 150, 137, 
	137, 170, 170, 0, 6, 78, 137, 138, 
	173, 137, 137, 137, 137, 137, 137, 137, 
	0, 6, 78, 137, 138, 137, 137, 137, 
	137, 153, 137, 137, 137, 0, 6, 78, 
	142, 143, 175, 176, 137, 142, 137, 145, 
	142, 142, 142, 148, 142, 174, 174, 0, 
	6, 78, 142, 143, 175, 137, 142, 137, 
	145, 142, 142, 142, 148, 142, 174, 174, 
	0, 6, 78, 142, 143, 137, 142, 137, 
	145, 142, 142, 142, 142, 177, 177, 0, 
	6, 78, 142, 143, 178, 179, 137, 180, 
	142, 142, 137, 145, 142, 142, 142, 150, 
	177, 177, 0, 6, 78, 142, 143, 178, 
	137, 142, 137, 145, 142, 142, 142, 150, 
	142, 177, 177, 0, 6, 78, 142, 143, 
	137, 180, 142, 142, 137, 145, 142, 142, 
	142, 142, 142, 0, 6, 78, 142, 143, 
	137, 142, 137, 145, 142, 142, 142, 153, 
	142, 142, 142, 0, 6, 78, 182, 183, 
	140, 182, 137, 185, 182, 182, 182, 182, 
	182, 182, 0, 6, 78, 182, 183, 137, 
	182, 137, 185, 182, 182, 182, 182, 182, 
	182, 0, 184, 184, 184, 0, 182, 182, 
	182, 0, 6, 78, 137, 138, 137, 137, 
	137, 137, 94, 137, 137, 186, 186, 0, 
	6, 78, 137, 138, 187, 188, 137, 137, 
	137, 137, 96, 137, 137, 186, 186, 0, 
	6, 78, 137, 138, 187, 137, 137, 137, 
	137, 96, 137, 137, 186, 186, 0, 6, 
	78, 137, 138, 137, 137, 137, 137, 137, 
	137, 189, 189, 0, 6, 78, 137, 138, 
	190, 191, 192, 137, 137, 137, 137, 137, 
	98, 137, 189, 189, 0, 6, 78, 137, 
	138, 190, 137, 137, 137, 137, 98, 137, 
	137, 189, 189, 0, 6, 78, 137, 138, 
	192, 137, 137, 137, 137, 137, 137, 137, 
	0, 6, 78, 137, 138, 137, 137, 137, 
	137, 101, 137, 137, 137, 0, 6, 78, 
	87, 88, 134, 193, 134, 181, 87, 87, 
	90, 87, 87, 87, 194, 201, 201, 0, 
	135, 195, 196, 136, 194, 194, 194, 0, 
	135, 195, 135, 136, 194, 194, 194, 0, 
	135, 136, 135, 135, 197, 197, 0, 6, 
	78, 135, 198, 199, 200, 197, 197, 197, 
	0, 135, 198, 135, 136, 197, 197, 197, 
	0, 6, 78, 135, 200, 135, 135, 135, 
	135, 0, 6, 78, 137, 138, 140, 137, 
	137, 137, 137, 101, 137, 137, 137, 0, 
	6, 78, 87, 88, 134, 193, 202, 181, 
	87, 87, 90, 87, 87, 87, 194, 201, 
	201, 0, 6, 78, 87, 88, 134, 181, 
	87, 87, 90, 87, 87, 87, 134, 135, 
	203, 203, 0, 6, 78, 87, 88, 134, 
	204, 205, 206, 87, 87, 90, 87, 87, 
	87, 197, 203, 203, 0, 6, 78, 87, 
	88, 134, 204, 134, 181, 87, 87, 90, 
	87, 87, 87, 197, 203, 203, 0, 6, 
	78, 87, 88, 134, 206, 87, 87, 90, 
	87, 87, 87, 134, 135, 134, 134, 0, 
	6, 78, 182, 183, 140, 182, 137, 185, 
	182, 182, 182, 101, 182, 182, 182, 0, 
	5, 208, 208, 0, 5, 209, 209, 0, 
	5, 210, 210, 0, 5, 211, 211, 0, 
	5, 212, 212, 0, 5, 213, 213, 0, 
	5, 214, 214, 0, 5, 215, 215, 0, 
	5, 216, 216, 0, 5, 217, 217, 0, 
	5, 218, 218, 0, 5, 219, 219, 0, 
	5, 220, 220, 0, 5, 221, 221, 0, 
	5, 222, 222, 0, 5, 223, 223, 0, 
	5, 224, 224, 0, 5, 225, 225, 0, 
	5, 226, 226, 0, 5, 227, 227, 0, 
	5, 228, 228, 0, 5, 229, 229, 0, 
	5, 0, 233, 235, 0, 233, 234, 0, 
	0
};

static readonly sbyte[] _http_parser_trans_actions =  new sbyte [] {
	31, 83, 83, 0, 5, 0, 25, 25, 
	0, 34, 1, 1, 0, 97, 97, 92, 
	92, 87, 92, 92, 92, 92, 92, 92, 
	92, 102, 102, 0, 0, 0, 0, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 0, 17, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	25, 25, 25, 25, 25, 0, 15, 1, 
	0, 15, 1, 1, 1, 1, 1, 0, 
	15, 1, 1, 1, 0, 15, 1, 1, 
	1, 0, 15, 1, 1, 1, 0, 15, 
	1, 1, 1, 0, 15, 1, 1, 1, 
	0, 61, 1, 0, 15, 1, 1, 1, 
	0, 15, 1, 1, 1, 0, 15, 1, 
	1, 1, 0, 52, 1, 0, 15, 1, 
	1, 1, 0, 15, 1, 1, 1, 0, 
	15, 1, 1, 1, 0, 15, 1, 1, 
	0, 15, 1, 1, 1, 0, 15, 1, 
	1, 1, 0, 15, 1, 1, 1, 0, 
	15, 1, 1, 1, 0, 15, 1, 1, 
	1, 0, 55, 1, 1, 13, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 13, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 13, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 49, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 13, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 13, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 13, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 13, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 13, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	46, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 13, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 13, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 13, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 13, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 13, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 13, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	13, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 13, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 58, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 13, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 13, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 13, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 13, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 13, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 13, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 64, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 11, 0, 0, 0, 7, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 0, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 0, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 0, 
	7, 7, 1, 0, 7, 7, 1, 0, 
	1, 1, 1, 0, 1, 1, 0, 1, 
	0, 1, 1, 0, 1, 0, 7, 7, 
	1, 1, 0, 7, 7, 1, 1, 0, 
	1, 1, 0, 1, 0, 1, 1, 0, 
	1, 0, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 0, 7, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 7, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 7, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 7, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 79, 79, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 0, 43, 43, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 0, 28, 28, 28, 0, 28, 28, 
	28, 0, 1, 1, 1, 0, 1, 1, 
	1, 0, 75, 75, 67, 71, 67, 67, 
	67, 67, 67, 67, 67, 67, 0, 40, 
	40, 28, 37, 28, 28, 28, 28, 28, 
	28, 28, 28, 0, 28, 28, 28, 0, 
	28, 28, 28, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 7, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 0, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 7, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 7, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 0, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 0, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 0, 1, 1, 
	1, 0, 1, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 7, 7, 1, 1, 
	1, 1, 0, 7, 7, 1, 1, 1, 
	1, 0, 1, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 7, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 7, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 7, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 7, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 7, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 0, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 7, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 7, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 7, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 7, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 0, 7, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	0, 7, 7, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 7, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 7, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 1, 1, 0, 34, 1, 1, 0, 
	34, 0, 19, 0, 0, 19, 21, 0, 
	0
};

static readonly sbyte[] _http_parser_from_state_actions =  new sbyte [] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 23
};

static readonly sbyte[] _http_parser_eof_actions =  new sbyte [] {
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0
};

const int http_parser_start = 1;
const int http_parser_first_final = 232;
const int http_parser_error = 0;

const int http_parser_en_main = 1;
const int http_parser_en_body_identity = 230;
const int http_parser_en_body_identity_eof = 234;
const int http_parser_en_dead = 231;


#line 315 "HttpParser.cs.rl"
        
        public HttpParser(IHttpParserHandler parser)
        {
            this.parser = parser;
			sb = new StringBuilder();
            
#line 1095 "HttpParser.cs"
	{
	cs = http_parser_start;
	}

#line 321 "HttpParser.cs.rl"
        }

        public int Execute(ArraySegment<byte> buf)
        {
            byte[] data = buf.Array;
            int p = buf.Offset;
            int pe = buf.Offset + buf.Count;
            int eof = buf.Count == 0 ? buf.Offset : -1;
            //int eof = pe;
            // mark = 0;
            
			//if (p == pe)
			//	Console.WriteLine("Parser executing on p == pe (EOF)");

            
#line 1116 "HttpParser.cs"
	{
	sbyte _klen;
	short _trans;
	sbyte _acts;
	sbyte _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _http_parser_from_state_actions[cs];
	_nacts = _http_parser_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _http_parser_actions[_acts++] ) {
	case 30:
#line 306 "HttpParser.cs.rl"
	{
			throw new Exception("Parser is dead; there shouldn't be more data. Client is bogus? fpc =" + p);
		}
	break;
#line 1139 "HttpParser.cs"
		default: break;
		}
	}

	_keys = _http_parser_key_offsets[cs];
	_trans = (short)_http_parser_index_offsets[cs];

	_klen = _http_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _http_parser_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _http_parser_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _http_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _http_parser_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _http_parser_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	cs = _http_parser_trans_targs[_trans];

	if ( _http_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _http_parser_trans_actions[_trans];
	_nacts = _http_parser_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _http_parser_actions[_acts++] )
		{
	case 0:
#line 38 "HttpParser.cs.rl"
	{
			sb.Append((char)data[p]);
		}
	break;
	case 1:
#line 42 "HttpParser.cs.rl"
	{
			sb.Length = 0;
		}
	break;
	case 2:
#line 46 "HttpParser.cs.rl"
	{
			sb2.Append((char)data[p]);
		}
	break;
	case 3:
#line 50 "HttpParser.cs.rl"
	{
			if (sb2 == null)
				sb2 = new StringBuilder();
			sb2.Length = 0;
		}
	break;
	case 4:
#line 56 "HttpParser.cs.rl"
	{
			//Console.WriteLine("message_begin");
			versionMajor = 0;
			versionMinor = 9;
			contentLength = -1;

			inContentLengthHeader = false;
			inConnectionHeader = false;
			inTransferEncodingHeader = false;
			inUpgradeHeader = false;

			gotConnectionClose = false;
			gotConnectionKeepAlive = false;
			gotTransferEncodingChunked = false;
			gotUpgradeValue = false;
			parser.OnMessageBegin(this);
		}
	break;
	case 5:
#line 74 "HttpParser.cs.rl"
	{
            //Console.WriteLine("matched absolute_uri");
        }
	break;
	case 6:
#line 77 "HttpParser.cs.rl"
	{
            //Console.WriteLine("matched abs_path");
        }
	break;
	case 7:
#line 80 "HttpParser.cs.rl"
	{
            //Console.WriteLine("matched authority");
        }
	break;
	case 8:
#line 83 "HttpParser.cs.rl"
	{
            //Console.WriteLine("matched first space");
        }
	break;
	case 9:
#line 86 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_first_space");
        }
	break;
	case 11:
#line 95 "HttpParser.cs.rl"
	{
			//Console.WriteLine("matched_leading_crlf");
		}
	break;
	case 12:
#line 105 "HttpParser.cs.rl"
	{
			parser.OnMethod(this, sb.ToString());
		}
	break;
	case 13:
#line 109 "HttpParser.cs.rl"
	{
			parser.OnRequestUri(this, sb.ToString());
		}
	break;
	case 14:
#line 114 "HttpParser.cs.rl"
	{
			parser.OnQueryString(this, sb2.ToString());
		}
	break;
	case 15:
#line 129 "HttpParser.cs.rl"
	{
			parser.OnFragment(this, sb2.ToString());
		}
	break;
	case 16:
#line 143 "HttpParser.cs.rl"
	{
			versionMajor = (char)data[p] - '0';
		}
	break;
	case 17:
#line 147 "HttpParser.cs.rl"
	{
			versionMinor = (char)data[p] - '0';
		}
	break;
	case 18:
#line 151 "HttpParser.cs.rl"
	{
            if (contentLength != -1) throw new Exception("Already got Content-Length. Possible attack?");
			//Console.WriteLine("Saw content length");
			contentLength = 0;
			inContentLengthHeader = true;
        }
	break;
	case 19:
#line 158 "HttpParser.cs.rl"
	{
			//Console.WriteLine("header_connection");
			inConnectionHeader = true;
		}
	break;
	case 20:
#line 163 "HttpParser.cs.rl"
	{
			//Console.WriteLine("header_connection_close");
			if (inConnectionHeader)
				gotConnectionClose = true;
		}
	break;
	case 21:
#line 169 "HttpParser.cs.rl"
	{
			//Console.WriteLine("header_connection_keepalive");
			if (inConnectionHeader)
				gotConnectionKeepAlive = true;
		}
	break;
	case 22:
#line 175 "HttpParser.cs.rl"
	{
			//Console.WriteLine("Saw transfer encoding");
			inTransferEncodingHeader = true;
		}
	break;
	case 23:
#line 180 "HttpParser.cs.rl"
	{
			if (inTransferEncodingHeader)
				gotTransferEncodingChunked = true;
		}
	break;
	case 24:
#line 185 "HttpParser.cs.rl"
	{
			inUpgradeHeader = true;
		}
	break;
	case 25:
#line 189 "HttpParser.cs.rl"
	{
			parser.OnHeaderName(this, sb.ToString());
		}
	break;
	case 26:
#line 193 "HttpParser.cs.rl"
	{
			var str = sb.ToString();
			//Console.WriteLine("on_header_value '" + str + "'");
			//Console.WriteLine("inContentLengthHeader " + inContentLengthHeader);
			if (inContentLengthHeader)
				contentLength = int.Parse(str);

			inConnectionHeader = inTransferEncodingHeader = inContentLengthHeader = false;
			
			parser.OnHeaderValue(this, str);
		}
	break;
	case 27:
#line 205 "HttpParser.cs.rl"
	{
			if (data[p] == 10)
			{
				//Console.WriteLine("leave_headers contentLength = " + contentLength);
				parser.OnHeadersEnd(this);

				// if chunked transfer, ignore content length and parse chunked (but we can't yet so bail)
				// if content length given but zero, read next request
				// if content length is given and non-zero, we should read that many bytes
				// if content length is not given
				//   if should keep alive, assume next request is coming and read it
				//   else read body until EOF

				if (contentLength == 0)
				{
					parser.OnMessageEnd(this);
					//fhold;
					{cs = 1; if (true) goto _again;}
				}
				else if (contentLength > 0)
				{
					//fhold;
					{cs = 230; if (true) goto _again;}
				}
				else
				{
					//Console.WriteLine("Request had no content length.");
					if (ShouldKeepAlive)
					{
						parser.OnMessageEnd(this);
						//Console.WriteLine("Should keep alive, will read next message.");
						//fhold;
						{cs = 1; if (true) goto _again;}
					}
					else
					{
						//Console.WriteLine("Not keeping alive, will read until eof. Will hold, but currently fpc = " + fpc);
						//fhold;
						{cs = 234; if (true) goto _again;}
					}
				}
			}
        }
	break;
	case 28:
#line 249 "HttpParser.cs.rl"
	{
			var toRead = Math.Min(pe - p, contentLength);
			//Console.WriteLine("body_identity: reading " + toRead + " bytes from body.");
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead - 1;
				contentLength -= toRead;
				//Console.WriteLine("content length is now " + contentLength);

				if (contentLength == 0)
				{
					parser.OnMessageEnd(this);

					if (ShouldKeepAlive)
					{
						//Console.WriteLine("Transitioning from identity body to next message.");
						//fhold;
						{cs = 1; if (true) goto _again;}
					}
					else
					{
						//fhold;
						{cs = 231; if (true) goto _again;}
					}
				}
				else
				{
					{p++; if (true) goto _out; }
				}
			}
		}
	break;
	case 29:
#line 282 "HttpParser.cs.rl"
	{
			var toRead = pe - p;
			//Console.WriteLine("body_identity_eof: reading " + toRead + " bytes from body.");
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead - 1;
				{p++; if (true) goto _out; }
			}
			else
			{
				parser.OnMessageEnd(this);
				
				if (ShouldKeepAlive)
					{cs = 1; if (true) goto _again;}
				else
				{
					//Console.WriteLine("body_identity_eof: going to dead");
					p--;
					{cs = 231; if (true) goto _again;}
				}
			}
		}
	break;
#line 1501 "HttpParser.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	sbyte __acts = _http_parser_eof_actions[cs];
	sbyte __nacts = _http_parser_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _http_parser_actions[__acts++] ) {
	case 10:
#line 89 "HttpParser.cs.rl"
	{
            //Console.WriteLine("eof_leave_first_space");
        }
	break;
	case 29:
#line 282 "HttpParser.cs.rl"
	{
			var toRead = pe - p;
			//Console.WriteLine("body_identity_eof: reading " + toRead + " bytes from body.");
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead - 1;
				{p++; if (true) goto _out; }
			}
			else
			{
				parser.OnMessageEnd(this);
				
				if (ShouldKeepAlive)
					{cs = 1; if (true) goto _again;}
				else
				{
					//Console.WriteLine("body_identity_eof: going to dead");
					p--;
					{cs = 231; if (true) goto _again;}
				}
			}
		}
	break;
#line 1550 "HttpParser.cs"
		default: break;
		}
	}
	}

	_out: {}
	}

#line 336 "HttpParser.cs.rl"
            
            var result = p - buf.Offset;

			if (result != buf.Count)
			{
				Console.WriteLine("error on character " + p);
				Console.WriteLine("('" + buf.Array[p] + "')");
				Console.WriteLine("('" + (char)buf.Array[p] + "')");
			}

			return p - buf.Offset;
        }
    }
}